import { Component, Input, ContentChildren, NgModule } from '@angular/core';
import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';
import { MatButtonModule, MatExpansionModule, MatIconModule, MatRippleModule, MatToolbarModule } from '@angular/material';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SideNavItemComponent {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
    }
    /**
     * @return {?}
     */
    navigate() {
        if (!this.disabled) {
            this.router.navigate([this.route]);
        }
    }
    /**
     * @param {?} path
     * @return {?}
     */
    activatePath(path) {
        if (path === this.route) {
            this.active = true;
        }
        else {
            this.active = false;
        }
    }
}
SideNavItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'side-nav-item',
                template: `<li>
                  <a class="side-nav-item" matRipple
                    [ngClass]="{'side-nav-item-active': active,'side-nav-item-disabled': disabled}"
                    (click)="navigate()">
                        <mat-icon *ngIf="icon" style="margin-right:10px;vertical-align:middle">{{ icon }}</mat-icon>
                        <span style="vertical-align:middle">{{ title }}</span>
                  </a>
               </li>`,
                styles: [`.side-nav-item {
          list-style-type: none;
          box-sizing: border-box;
          display: block;
          font-size: 14px;
          font-weight: 400;
          line-height: 47px;
          text-decoration: none;
          transition: all .3s;
          padding: 0 16px;
          position: relative;
          cursor: pointer;
        }`]
            }] }
];
/** @nocollapse */
SideNavItemComponent.ctorParameters = () => [
    { type: Router }
];
SideNavItemComponent.propDecorators = {
    title: [{ type: Input }],
    icon: [{ type: Input }],
    route: [{ type: Input }],
    disabled: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MatSidenavMenuComponent {
    /**
     * @param {?} router
     * @param {?} aroute
     */
    constructor(router, aroute) {
        this.router = router;
        this.aroute = aroute;
        // console.log('router:', this.router);
        this.router.events.subscribe(e => {
            // console.log('url:', this.router.url);
            // console.log('router state:', this.router.routerState);
            // if (this.router.routerState.root.children.length > 0 ) {
            if (e instanceof NavigationEnd) {
                // console.log('component:', '(' + Date.now + ')' + this.router.routerState.root.children[0].component);
                // console.log('path: ' + this.getPath());
                this.items.forEach(i => {
                    i.activatePath(this.getPath());
                });
                this.sidenav.close();
            }
            // console.log('path:', this.erouterState);
        });
        // this.aroute.url.subscribe( (u) => {
        //   console.log('active route:', u);
        // });
    }
    /**
     * @return {?}
     */
    getPath() {
        /** @type {?} */
        const path = this.router.routerState.snapshot.url;
        return path;
    }
}
MatSidenavMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'side-nav-menu',
                template: `
      <nav style="height:100%">
        <mat-toolbar color="primary">
          <button mat-icon-button (click)="sidenav.close()"><mat-icon>keyboard_arrow_left</mat-icon></button>&nbsp;
          <span>{{ title }}</span>
        </mat-toolbar>

        <ul class="side-nav-menu">
          <ng-content></ng-content>
        </ul>
      </nav>`,
                styles: [`.side-nav-menu {
          list-style-type: none;
          padding: 0
      }`]
            }] }
];
/** @nocollapse */
MatSidenavMenuComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
MatSidenavMenuComponent.propDecorators = {
    sidenav: [{ type: Input }],
    title: [{ type: Input }],
    items: [{ type: ContentChildren, args: [SideNavItemComponent, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SideNavGroupComponent {
}
SideNavGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'side-nav-group',
                template: `<div class="side-nav-group">
        <div *ngIf="title" class="side-nav-group-title">
          <span style="padding: 0 16px;">{{ title }}</span>
        </div>
        <ng-content></ng-content>
    </div>`,
                styles: [".side-nav-group{border-width:1px 0;border-style:solid}.side-nav-group-title{width:100%}"]
            }] }
];
SideNavGroupComponent.propDecorators = {
    title: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SideNavExpansionGroupComponent {
}
SideNavExpansionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'side-nav-x-group',
                template: `<mat-expansion-panel [hideToggle]="hideToggle">
        <mat-expansion-panel-header *ngIf="title">{{ title }}</mat-expansion-panel-header>
        <ng-content></ng-content>
    </mat-expansion-panel>`,
                styles: [`
    div.mat-expansion-panel-body {
      padding-right: 0px;
      padding-left: 0px;
    }
  `]
            }] }
];
SideNavExpansionGroupComponent.propDecorators = {
    title: [{ type: Input }],
    hideToggle: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MatSidenavMenuModule {
}
MatSidenavMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SideNavExpansionGroupComponent, SideNavGroupComponent, MatSidenavMenuComponent, SideNavItemComponent,
                ],
                imports: [
                    BrowserModule, BrowserAnimationsModule,
                    MatButtonModule, MatExpansionModule, MatIconModule, MatToolbarModule, MatRippleModule
                ],
                exports: [
                    MatExpansionModule,
                    SideNavExpansionGroupComponent, SideNavGroupComponent, SideNavItemComponent, MatSidenavMenuComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MatSidenavMenuComponent, MatSidenavMenuModule, SideNavExpansionGroupComponent as ɵb, SideNavGroupComponent as ɵc, SideNavItemComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,